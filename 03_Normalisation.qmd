---
title: "Normalisation"
author: "Jamie Soul"
format:
  html:
    self-contained: true
    theme: litera
    toc: true
editor: visual
code-block-bg: true
code-block-border-left: "#31BAE9"
---

# Normalisation

The data needs to be normalised to allow differential expression between samples where expression of a genes changes between conditions due to technical factors such as the sequencing depth. Two normalisation approaches are used upper quantile normalisation from the GeoMXTools workflow and model based normalisation from the GeoDiff workflow.

## Load libraries

```{r}
#| output: false
library(NanoStringNCTools)
library(GeomxTools)
library(GeoMxWorkflows)
library(testthat)
library(tidyverse)
library(cowplot)
library(janitor)
library(GeoDiff)
library(edgeR)
library(ggsci)
```

## Load filtered data

QC filtered data is loaded from the previous steps. Note that the samples and genes filtered out differ between the approaches.

```{r}
target_spatialData <- readRDS("results/filteredSpatialData.RDS")
spatialData_geoDiff <- readRDS("results/GeoDiffSpatialData.RDS")
```

## Plot negative control probes

```{r}
# Graph Q3 value vs negGeoMean of Negatives
ann_of_interest <- "segment"

#get the negative probes
negativeProbefData <- subset(fData(target_spatialData), CodeClass == "Negative")
neg_probes <- unique(negativeProbefData$TargetName)

Stat_data <- 
    data.frame(row.names = colnames(exprs(target_spatialData)),
               Segment = colnames(exprs(target_spatialData)),
               Annotation = pData(target_spatialData)[, ann_of_interest],
               Q3 = unlist(apply(exprs(target_spatialData), 2,
                                 quantile, 0.75, na.rm = TRUE)),
               NegProbe = exprs(target_spatialData)[neg_probes, ])


Stat_data_m <- gather(Stat_data, key ="Statistic" ,value =  "Value", c("Q3", "NegProbe"))

plt1 <- ggplot(Stat_data_m,
               aes(x = Value, fill = Statistic)) +
    geom_histogram(bins = 40) + theme_bw() +
    scale_x_continuous(trans = "log2") +
    facet_wrap(~Annotation, nrow = 1) + 
    scale_fill_brewer(palette = 3, type = "qual") +
    labs(x = "Counts", y = "Segments, #")

plt2 <- ggplot(Stat_data,
               aes(x = NegProbe, y = Q3, color = Annotation)) +
    geom_abline(intercept = 0, slope = 1, lty = "dashed", color = "darkgray") +
    geom_point() + guides(color = "none") + theme_bw() +
    scale_x_continuous(trans = "log2") + 
    scale_y_continuous(trans = "log2") +
    theme(aspect.ratio = 1) +
    labs(x = "Negative Probe GeoMean, Counts", y = "Q3 Value, Counts")

plt3 <- ggplot(Stat_data,
               aes(x = NegProbe, y = Q3 / NegProbe, color = Annotation)) +
    geom_hline(yintercept = 1, lty = "dashed", color = "darkgray") +
    geom_point() + theme_bw() +
    scale_x_continuous(trans = "log2") + 
    scale_y_continuous(trans = "log2") +
    theme(aspect.ratio = 1) +
    labs(x = "Negative Probe GeoMean, Counts", y = "Q3/NegProbe Value, Counts")

btm_row <- plot_grid(plt2, plt3, nrow = 1, labels = c("B", ""),
                     rel_widths = c(0.43,0.57))
q3vsneg <- plot_grid(plt1, btm_row, ncol = 1, labels = c("A", ""))


save_plot(filename = "figures/Normalisation/q3vsneg.png",plot = q3vsneg,
          base_height = 8,base_width = 8, bg="white")

q3vsneg

```

## Perform normalisation

```{r}
# Q3 norm (75th percentile) for WTA/CTA  with or without custom spike-ins
target_spatialData <- NanoStringNCTools::normalize(target_spatialData ,
                             norm_method = "quant", 
                             desiredQuantile = .75,
                             toElt = "q_norm")

# TMM normalization
dgList <- DGEList(assayDataElement(target_spatialData,elt="exprs"))
dgList <- calcNormFactors(dgList, method="TMM")
cpms <- cpm(dgList)
assayDataElement(object = target_spatialData, elt = "cpm") <- log2(cpms)

saveRDS(target_spatialData,file = "results/normalisedSpatialData.RDS")
```

## Perform GeoDiff based normalisation

```{r}
posdat <- spatialData_geoDiff[-which(fData(spatialData_geoDiff)$CodeClass == "Negative"), ]
features_all <- rownames(posdat)
features_high <- rownames(fData(spatialData_geoDiff))[fData(spatialData_geoDiff)$feature_high_fitNBth == 1]

ROIs_high <- sampleNames(spatialData_geoDiff)[which((quantile(fData(spatialData_geoDiff)[["para"]][, 1],
                                                  probs = 0.90, na.rm = TRUE) -   notes(spatialData_geoDiff)[["threshold"]])*spatialData_geoDiff$sizefact_fitNBth>2)]

spatialData_geoDiff <- fitPoisthNorm(object = spatialData_geoDiff,
                        ROIs_high = ROIs_high,
                        features_high=features_high,features_all=features_all,
                        threshold_mean = notes(spatialData_geoDiff)[["bgMean"]],
                        sizescalebythreshold = TRUE)

spatialData_geoDiff <- fitPoisthNorm(object = spatialData_geoDiff,
                        ROIs_high = ROIs_high,
                        features_high=features_high,features_all=features_all,
                        threshold_mean = notes(spatialData_geoDiff)[["bgMean"]],
                        sizescalebythreshold = TRUE,split=TRUE)

saveRDS(spatialData_geoDiff[,ROIs_high],file = "results/GeoDiffNormalisedSpatialData.RDS")

```

## Boxplots of normalised data

::: panel-tabset
## Raw data

The raw data shows large difference in sequencing depths.

```{r}
rawData <- log2(exprs(target_spatialData)) %>%  as.data.frame() %>%
  gather() 


metaData <- pData(target_spatialData)[,c("slide name","segment","Disease")]
labels <- make_clean_names(metaData$Region,case = "parsed")

rawDataPlot <- merge(rawData,metaData,by.x="key",by.y="row.names") %>%
ggplot(aes(x=key,y=value,fill=`slide name`)) + geom_boxplot() +  ylab("log2 raw counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/rawDataBoxplots.png",plot = rawDataPlot,
          base_height = 7,base_width = 16, bg="white")

rawDataPlot


rawDataDensity <- rawData %>% merge(.,metaData,by.x="key",by.y="row.names") %>% 
    ggplot(aes(x=value,color=`slide name`)) + geom_density() +  ylab("log2 raw counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  + theme(legend.position = "none") +  facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/rawDataDensity.png",plot = rawDataDensity,
          base_height = 7,base_width = 7, bg="white")

rawDataDensity


```

## Q3 normalised

The Q3 normalised data looks good between the patients although there are some spikes in the values as seen in the CD45/56 density plots.

```{r}
q3Normalised <- log2(assayDataElement(target_spatialData, elt = "q_norm")) %>%  as.data.frame() %>%
  gather() 


metaData <- pData(target_spatialData)[,c("slide name","segment","Disease")]
labels <- make_clean_names(metaData$Region,case = "parsed")

q3NormalisedPlot <- merge(q3Normalised,metaData,by.x="key",by.y="row.names") %>%
ggplot(aes(x=key,y=value,fill=`slide name`)) + geom_boxplot() +  ylab("log2 Q3 counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/Q3NormalisedPlot.png",plot = q3NormalisedPlot,
          base_height = 7,base_width = 16, bg="white")


q3NormalisedPlot


q3NormalisedDensity <- q3Normalised %>% merge(.,metaData,by.x="key",by.y="row.names") %>% 
    ggplot(aes(x=value,color=`slide name`)) + geom_density() +  ylab("log2 Q3 counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme(legend.position = "none") + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/q3NormalisedDensity.png",plot = q3NormalisedDensity,
          base_height = 7,base_width = 7, bg="white")

q3NormalisedDensity

q3NormalisedDensityDisease <- q3Normalised %>% merge(.,metaData,by.x="key",by.y="row.names") %>% 
    ggplot(aes(x=value,color=Disease)) + geom_density() +  ylab("log2 Q3 counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme(legend.position = "none") + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/q3NormalisedDensityDisease.png",plot = q3NormalisedDensityDisease,
          base_height = 7,base_width = 7, bg="white")

q3NormalisedDensityDisease

```

## TMM normalised

```{r}
TMMNormalised <- log2(assayDataElement(target_spatialData, elt = "cpm")) %>%  as.data.frame() %>%
  gather() 


metaData <- pData(target_spatialData)[,c("slide name","segment","Disease")]
labels <- make_clean_names(metaData$Region,case = "parsed")

TMMNormalisedPlot <- merge(TMMNormalised,metaData,by.x="key",by.y="row.names") %>%
ggplot(aes(x=key,y=value,fill=`slide name`)) + geom_boxplot() +  ylab("log2 TMM counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/TMMNormalisedPlot.png",plot = TMMNormalisedPlot,
          base_height = 7,base_width = 16, bg="white")


TMMNormalisedPlot


TMMNormalisedDensity <- TMMNormalised %>% merge(.,metaData,by.x="key",by.y="row.names") %>% 
    ggplot(aes(x=value,color=`slide name`)) + geom_density() +  ylab("log2 TMM counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme(legend.position = "none") + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/TMMNormalisedDensity.png",plot = TMMNormalisedDensity,
          base_height = 7,base_width = 7, bg="white")

TMMNormalisedDensity

TMMNormalisedDensityDisease <- TMMNormalised %>% merge(.,metaData,by.x="key",by.y="row.names") %>% 
    ggplot(aes(x=value,color=Disease)) + geom_density() +  ylab("log2 TMM counts") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme(legend.position = "none") + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/TMMNormalisedDensityDisease.png",plot = TMMNormalisedDensityDisease,
          base_height = 7,base_width = 7, bg="white")

TMMNormalisedDensityDisease

```

## GeoDiff normalised

The GeoDiff normalised data look smoother with normal curves in the CD45/56 cell types but the slides look less well normalised.

```{r}
geoDiffNormalised <- assayDataElement(spatialData_geoDiff[,ROIs_high], elt = "normmat") %>%  as.data.frame() %>%  gather() 

metaData <- pData(target_spatialData)[,c("slide name","segment","Disease")]

labels <- make_clean_names(metaData$Region,case = "parsed")

geoDiffNormalisedPlot <- merge(geoDiffNormalised,metaData,by.x="key",by.y="row.names") %>%
ggplot(aes(x=key,y=value,fill=`slide name`)) + geom_boxplot() +  ylab("log Poisson Threshold Normalized values") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/geoDiffNormalisedPlot.png",plot = geoDiffNormalisedPlot,
          base_height = 7,base_width = 16, bg="white")


geoDiffNormalisedPlot


geoDiffNormalisedDensity <- geoDiffNormalised %>% merge(.,metaData,by.x="key",by.y="row.names") %>% 
    ggplot(aes(x=value,color=`slide name`)) + geom_density() +  ylab("log Poisson Threshold Normalized values") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme(legend.position = "none") + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/geoDiffNormalisedDensity.png",plot = geoDiffNormalisedDensity,
          base_height = 7,base_width = 7, bg="white")

geoDiffNormalisedDensity

geoDiffNormalisedDensityDisease <- geoDiffNormalised %>% merge(.,metaData,by.x="key",by.y="row.names") %>% 
    ggplot(aes(x=value,color=Disease)) + geom_density() +  ylab("log Poisson Threshold Normalized values") + xlab("Segment") + theme_cowplot() + scale_x_discrete(labels=labels) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  + facet_wrap(~segment)

save_plot(filename = "figures/Normalisation/geoDiffNormalisedDensityDisease.png",plot = geoDiffNormalisedDensityDisease,
          base_height = 7,base_width = 7, bg="white")

geoDiffNormalisedDensityDisease

```
:::

## Segment marker expression

Expression of the known segment markers should correspond to the known segment labels if the data is correctly annotated and well normalised.

```{r}
#| warning: false
dat <- assayDataElement(target_spatialData, elt = "q_norm")

g <- dat[c("PTPRC","NCAM1","KRT8"),]  %>%  as.data.frame() %>%  rownames_to_column("Gene") %>% reshape2::melt() %>%  merge(.,metaData,by.x="variable",by.y="row.names") %>%
ggplot(aes(x=segment,y=value,fill=segment)) + geom_boxplot() +  ylab("Q3 Normalized counts") + xlab("Segment") + theme_cowplot() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + facet_wrap(~Gene,scales = "free") + scale_fill_npg(labels = c("CD45" = expression(CD45^"+"),"CD56"=expression(CD56^"+"),"PANCK"=expression(PanCK^"+"))) +scale_x_discrete(labels = c("CD45" = expression(CD45^"+"),"CD56"=expression(CD56^"+"),"PANCK"=expression(PanCK^"+")))

saveRDS(g,"results/antibodyValues.RDS")

save_plot(g,filename = "figures/Normalisation/antibodyValues.pdf",bg="white")
g
```

::: {.callout-note collapse="true"}
## Session Info

```{r}
sessionInfo()
```
:::
